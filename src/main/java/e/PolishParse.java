/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package e;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Stack;
import java.util.function.BiFunction;

public class PolishParse {

    private static Map<String, BiFunction<Integer, Integer, Integer>> opFns;

    static {
        opFns = new HashMap<>();
        opFns.put("+", Integer::sum);
        opFns.put("-", (a, b) -> a - b);
        opFns.put("*", (a, b) -> a * b);
        opFns.put("/", (a, b) -> a / b);
    }

    public static int consume(int operand2, Stack<String> stack) throws IllegalArgumentException {
        if (!stack.isEmpty() && !opFns.containsKey(stack.peek())) {
            int operand1 = Integer.parseInt(stack.pop());
            if (stack.isEmpty()) {
                throw new IllegalArgumentException("no op in stack");
            }
            String op = stack.pop();
            int result = opFns.get(op).apply(operand1, operand2);
            if (stack.isEmpty()) {
                return result;
            } else {
                return consume(result, stack);
            }
        }
        throw new IllegalArgumentException("unexpected empty stack or stack top is op");
    }

    public static void main(String[] args) {

        Stack<String> stack = new Stack<>();
        int result;

        System.out.println("Please enter a line for calculation: ");

        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            String line = scanner.nextLine().trim();
            String[] tokens = line.split("\\s+");
            try {
                for (String token : tokens) {
                    if (!opFns.containsKey(token)) {
                        if (!stack.isEmpty() && !opFns.containsKey(stack.peek())) {
                            int operand1 = Integer.parseInt(stack.pop());
                            if (stack.isEmpty()) {
                                System.err.printf("error line: %s, current stack: %s\n", line, stack);
                                break;
                            } else {
                                String op = stack.pop();
                                int operand2 = Integer.parseInt(token);
                                result = opFns.get(op).apply(operand1, operand2);
                                if (!stack.isEmpty()) {
                                    result = consume(result, stack);
                                }
                                stack.push(Integer.toString(result));
                            }
                        } else {
                            stack.push(token);
                        }
                    } else {
                        stack.push(token);
                    }
                }
                System.out.println(stack.pop());
            } catch (IllegalArgumentException exception) {
                System.err.println(exception.getMessage());
            }
        }
    }
}
